# -*- coding: utf-8 -*-
"""science.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gwqxabqBGPpa3b5_TVHafnHoeoRnX4p6
"""

import numpy as np
import struct
from matplotlib import pyplot as plt
from scipy import signal

#file = open('rags04ah.RCP-514-USB.arc2.bin', 'rb')
#file = open('secspec_slice_512x201.bin', 'rb')
file = open('rags29j.771-USB.combined.512x516.1of1.frdelay.ifft.tr.fft.tr_amp.dat', 'rb')
#file = open('raks02aa.514.lcp-rcp.averaged.secspec.1133x395.bin', 'rb')
bin = bytearray(file.read())
binlist = list(struct.unpack('f'*int(len(bin)/4), bin))

x_size = 512
y_size = 516
data = np.array(binlist, dtype=np.float32).reshape(y_size, x_size)
data = np.log10(data)
#data += abs(data.min())
#print(data.min())

plt.imshow(data)
plt.show()

#filter1 = np.array([[0.0625, 0.125, 0.0625], [0.125, 0.25, 0.125], [0.0625, 0.125, 0.0625]])
#data = signal.convolve2d(data, filter1, mode='same')
#data[95:110, :] = data.min()
data[int(y_size/2)-5:int(y_size/2)+5, :] = data.min()
data[:, int(x_size/2)-5:int(x_size/2)+5] = data.min()
data = data[:, int(x_size/2):]
data += abs(data.min())
data.min()
#filter2 = np.array([[-1, -1, -1], [-1, 9, -1], [-1, -1, -1]])
#upd = signal.convolve2d(data, filter2, mode='same')

plt.imshow(data)
plt.show()

x_size, y_size = data.shape
print(data.shape)
def parabola(x_size, k):
  x = np.arange(x_size)
  y = [w if (w := k*(x-int(x_size/2))**2) < y_size else -1 for x in x]
  l = np.array([[u, v] for u, v in zip(x, y)]).astype(int)
  l = np.delete(l, np.where(l[:, 1] == -1), axis = 0)
  return l

def indexed(data, l):
  data_indexed = np.array([data[i, j] for i, j in l])
  return data_indexed

tval = np.linspace(0, 0.5, num=10000)
scores = np.vectorize(lambda t: indexed(data, parabola(x_size, t)).sum()/len(indexed(data, parabola(x_size, t))))(tval)
tmax = tval[scores.argmax()]
print(tmax)
#print(indexed(data, parabola(x_size, tmax)))

points = parabola(x_size, tmax)
x, y = points[:, 0], points[:, 1]
new = data
new[x, y] = 3*data.max()
plt.imshow(data)
plt.show()

plt.plot(tval, scores)

"""Тестовая область"""

x_size = 21
y_size = 21
data = np.ones([y_size, x_size], dtype = int)
data

x = np.arange(x_size+1)
k = 1
y = [w if (w := k*(x-int(x_size/2))**2) <= y_size else -1 for x in x]
l = np.array([[u, v] for u, v in zip(y, x)])
l = np.delete(l, np.where(l[:, 0] == -1), axis = 0)
l

data_indexed = np.array([data[i, j] for i, j in l])
data_indexed.sum()

